
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/widgets/framework.dart';

import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:image_picker/image_picker.dart';
import 'package:flutter_native_image/flutter_native_image.dart';
import 'package:awesome_dropdown/awesome_dropdown.dart';
import 'package:awesome_dialog/awesome_dialog.dart';
import 'package:jalanidhi_app/AAORefIdModel.dart';
import 'package:jalanidhi_app/AAOVerified.dart';
import 'package:jalanidhi_app/aaoVerifyModel.dart';
import 'package:jalanidhi_app/database.dart';
import 'package:jalanidhi_app/home.dart';
import 'package:jalanidhi_app/navdrawer.dart';
import 'package:jalanidhi_app/submitPhotoModel.dart';
import 'package:jalanidhi_app/syncpage.dart';
import 'package:jalanidhi_app/verify.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:convert';
import 'dart:io';
import 'dart:math';

class aaoVerify extends StatefulWidget {
  String REF_NO;
  bool hasRemainingPlots;
  getVar1() {
    return REF_NO;
  }

  aaoVerify({Key? key, required this.REF_NO, this.hasRemainingPlots = false})
      : super(key: key);
  factory aaoVerify.fromJson(Map<String, dynamic> json) {
    return aaoVerify(REF_NO: json['REF_NO']);
  }
  @override
  State<aaoVerify> createState() => _aaoVerifyState();
}

class _aaoVerifyState extends State<aaoVerify> {
  dynamic selectedPlot;
  List<aaoVerifyModel> plotDetails = [];
  List<aaoVerifyModel> plotList = [];
  List<submitPhotoModel> photo = [];
  bool isMainPlot = true;
  bool hasRemainingPlots = false;

  bool isUserDisabled = true;

  // bool showMessage = false; // Add this variable
  Future<File> CustomCompressed({
    required File imagePathTocompress,
    quality = 80,
    percentage = 10,
  }) async {
    var path = await FlutterNativeImage.compressImage(
      imagePathTocompress.absolute.path,
      quality: 80,
      percentage: 10,
    );
    return path;
  }

  @override
  void initState() {
    super.initState();
    getRefwisePlots();
    if (widget.hasRemainingPlots) {
      setState(() {
        isMainPlot = false;
      });
    }
  }

  dynamic farmerPhoto1;
  getRefwisePlots() async {
    var REF_NO = widget.REF_NO;
    await DatabaseHelper.instance.getRef(REF_NO).then((value) {
      setState(() {
        plotList = value;
        print('sssssssa');

        print(plotList[0].PLT_NO);
        print(plotList[0].REF_NO);
        hasRemainingPlots = plotList.isNotEmpty;
        print('sssssssa');
      });
    });
  }

  getPlotDetails1(String PLT_NO, String REF_NO) async {
    await DatabaseHelper.instance.getPlotDetails(PLT_NO, REF_NO).then((value) {
      setState(() {
        plotDetails = value;

        print(plotDetails[0].PLT_NO);
        print(plotDetails[0].REF_NO);
      });
    });
  }

  getsubmitPhoto1() async {
    await DatabaseHelper.instance.getsubmitPhoto().then((value) {
      setState(() {
        photo = value;
        print('plot getsubmitPhoto1 s');

        print(photo[0].photo);
        print(photo[0].REF_NO);
        print(photo[0].Lattitude);
        print(photo[0].Longitude);
        print(photo[0].PLT_NO);

        print(photo[0].isMainPlot);

        print('plot getsubmitPhoto1 e');
      });
    });
  }

  List<AAOVerified> verifiedPhoto = [];

  verifiedRef() async {
    await DatabaseHelper.instance.verifiedRef1().then((value) {
      setState(() {
        verifiedPhoto = value;

        print('plot verifiedRef1 s');

        print(verifiedPhoto[0].REF_NO);

        print('plot verifiedRef1 e');
      });
    });
  }

  Future getFarmersPhoto() async {
    await Geolocator.requestPermission();
    final groupFickedFile = await ImagePicker().pickImage(
      source: ImageSource.camera,
    );
    if (groupFickedFile != null) {
      File image = File(groupFickedFile.path);
      File compressedImage = await CustomCompressed(imagePathTocompress: image);
      setState(() {
        farmerPhoto1 = compressedImage;
      });
      await _getCurrentLocation(); // Ensure location is retrieved after setting the photo
    } else {
      // print('No image selected.');
    }
    setState(() {});
  }

  Position? _currentPosition;
  bool _isValidated = false;

  String convertDecimalToDMS(double decimalDegree) {
    int degree = decimalDegree.floor();
    double minuteDouble = (decimalDegree - degree) * 60;
    int minute = minuteDouble.floor();
    double second = (minuteDouble - minute) * 60;

    return "$degreeÂ°$minute`$second\"";
  }

// Update the _getCurrentLocation method
  _getCurrentLocation() {
    Geolocator.getCurrentPosition(
      desiredAccuracy: LocationAccuracy.high,
      forceAndroidLocationManager: false,
    ).then((Position position) {
      setState(() {
        _currentPosition = position;
        _isValidated = true;

        // Convert decimal latitude and longitude to DMS format
        String latitudeDMS =
            convertDecimalToDMS(_currentPosition?.latitude ?? 0);
        String longitudeDMS =
            convertDecimalToDMS(_currentPosition?.longitude ?? 0);

        print('Current Latitude: $latitudeDMS');
        print('Current Longitude: $longitudeDMS');
      });
    }).catchError((e) {
      print('Error getting current location: $e');
    });
  }

  _showSuccessDialog() {
    AwesomeDialog(
      context: context,
      dialogType: DialogType.SUCCES,
      animType: AnimType.BOTTOMSLIDE,
      title: 'Success Message',
      desc: 'Data Saved Successfully.',
      dismissOnTouchOutside: false,
      btnCancelOnPress: () {},
      btnOkOnPress: () async {
        await DatabaseHelper.instance.deletePlot(selectedPlot);

        // Check if there are any remaining plots for the current REF_NO
        // bool hasRemainingPlots =
        //     await DatabaseHelper.instance.hasRemainingPlots(widget.REF_NO);
        hasRemainingPlots =
            await DatabaseHelper.instance.hasRemainingPlots(widget.REF_NO);
        selectedPlot = '';
        Navigator.pop(context); // Close the current dialog

        if (hasRemainingPlots) {
          // If there are remaining plots, navigate back to the same page
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => aaoVerify(
                REF_NO: widget.REF_NO,
                hasRemainingPlots: hasRemainingPlots,
              ),
            ),
          );
        } else {
          // If there are no remaining plots, navigate to the homepage
          Navigator.pushAndRemoveUntil(
            context,
            MaterialPageRoute(
              builder: (context) =>
                  Homepage(), // Replace 'Homepage' with your actual homepage class
            ),
            (route) => false,
          );
        }
        if (widget.hasRemainingPlots) {
          setState(() {
            isMainPlot = false;
          });
        }
      },
    ).show();
  }

  Future<bool> _onWillPop() async {
    return (await showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text('Are you sure?'),
            content: const Text('Do you want to exit the App'),
            actions: <Widget>[
              TextButton(
                onPressed: () => Navigator.of(context).pop(false),
                child: const Text('No'),
              ),
              TextButton(
                onPressed: () => Navigator.of(context).pop(true),
                child: const Text('Yes'),
              ),
            ],
          ),
        )) ??
        false;
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        // drawer: NavDrawer(),
        appBar: AppBar(
          centerTitle: true,
          title: const Text('AAO Verify'),
          backgroundColor: Color.fromARGB(255, 24, 147, 209),
        ),
        body: Container(
          color: Colors.lightBlue.shade50,
          alignment: Alignment.topCenter,
          child: SingleChildScrollView(
            physics: const AlwaysScrollableScrollPhysics(),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                selectPlot(),
                if (widget.hasRemainingPlots)
                  // Check if there are remaining plots
                  Container(
                    margin: EdgeInsets.symmetric(vertical: 30.0),
                    padding: EdgeInsets.all(8.0),
                    decoration: BoxDecoration(
                      color: Color.fromARGB(
                          255, 255, 248, 185), // Choose a background color
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                    child: Text(
                      'Please take photo of all the remaining plots. Once done, finnaly synchronize.',
                      style: TextStyle(
                        color: Colors.red,
                        fontWeight: FontWeight.bold,
                        fontSize: 16.0, // Increase font size
                      ),
                    ),
                  )
                else
                  Container(
                    // margin: EdgeInsets.symmetric(vertical: 30.0),
                    margin: const EdgeInsets.only(
                        top: 0.0, left: 20.0, right: 20.0, bottom: 40.0),
                    padding: EdgeInsets.all(8.0),
                    decoration: BoxDecoration(
                      color: Color.fromARGB(0, 0, 0, 0),
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                    child: Text(
                      'Please select main plot first',
                      style: TextStyle(
                        color: Color.fromARGB(255, 255, 0, 0),
                        fontWeight: FontWeight.bold,
                        fontSize: 16.0,
                      ),
                    ),
                  ),
                if (plotDetails
                    .isNotEmpty) // Only show Card if plotDetails is not empty
                  plotDetailsCard(),
                imagePicker(context),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget selectPlot() => Container(
        padding: const EdgeInsets.all(35.0),
        child: DropdownButtonFormField(
          hint: const Text("Select Plot"),
          decoration: InputDecoration(
            enabledBorder: OutlineInputBorder(
              borderSide: const BorderSide(color: Colors.white, width: 2),
              borderRadius: BorderRadius.circular(20),
            ),
            border: OutlineInputBorder(
              borderSide: const BorderSide(color: Colors.white, width: 2),
              borderRadius: BorderRadius.circular(20),
            ),
            filled: true,
            fillColor: Colors.white,
          ),
          dropdownColor: Colors.white,
          value: selectedPlot,
          onChanged: (newValue) {
            setState(() {
              selectedPlot = newValue;
              getPlotDetails1(selectedPlot, widget.REF_NO);
              print(selectedPlot);
            });
          },
          items: plotList.map((e) {
            return DropdownMenuItem(
              value: e.PLT_NO,
              child: Text(e.PLT_NO),
            );
          }).toList(),
        ),
      );

  Widget plotDetailsCard() => Card(
        margin: const EdgeInsets.all(16.0),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('Plot Number: ${plotDetails[0].PLT_NO}'),
              Text('Reference Number: ${plotDetails[0].REF_NO}'),
              Text('KHATA NO: ${plotDetails[0].KHATA_NO}'),
              Text('KISSAM: ${plotDetails[0].KISSAM}'),

              // Add other details as needed

              // Radio buttons for "Is this main plot?"
              const SizedBox(height: 16.0),
              // Text(
              //   'Please choose "Yes" for at least one plot as the main plot.',
              //   style: TextStyle(
              //     color: Colors.red, // You can choose a different text color
              //     fontWeight:
              //         FontWeight.bold, // You can add more styles as needed
              //   ),
              // ),
              const SizedBox(height: 5.0),
              Text('Is main plot?'),

              Row(
                children: [
                  Radio(
                    value: true,
                    groupValue: isMainPlot,
                    onChanged: isUserDisabled
                        ? null // set onChanged to null to disable interaction
                        : (value) {
                            setState(() {
                              isMainPlot = value as bool;
                            });
                          },
                  ),
                  const Text('Yes'),
                  Radio(
                    value: false,
                    groupValue: isMainPlot,
                    onChanged: isUserDisabled
                        ? null // set onChanged to null to disable interaction
                        : (value) {
                            setState(() {
                              isMainPlot = value as bool;
                            });
                          },
                  ),
                  const Text('No'),
                ],
              ),
              // Row(
              //   children: [
              //     Radio(
              //       value: true,
              //       groupValue: isMainPlot,
              //       onChanged: (value) {
              //         setState(() {
              //           isMainPlot = value!;
              //         });
              //       },
              //     ),
              //     const Text('Yes'),
              //     Radio(
              //       value: false,
              //       groupValue: isMainPlot,
              //       onChanged: (value) {
              //         setState(() {
              //           isMainPlot = value!;
              //         });
              //       },
              //     ),
              //     const Text('No'),
              //   ],
              // ),
            ],
          ),
        ),
      );

  Widget imagePicker(context) => Container(
        margin:
            const EdgeInsets.only(left: 5.0, top: 0.0, right: 5.0, bottom: 5.0),
        decoration: BoxDecoration(
          color: Colors.white70,
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(10),
            topRight: Radius.circular(10),
            bottomLeft: Radius.circular(10),
            bottomRight: Radius.circular(10),
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.5),
              spreadRadius: 3,
              blurRadius: 5,
              offset: const Offset(0, 3), // changes position of shadow
            ),
          ],
        ),

        // height: 200,
        child: Column(
          children: <Widget>[
            Row(
              children: [
                Expanded(
                  child: Card(
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10.0),
                    ),
                    child: Container(
                      height: 250,
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.start,
                        mainAxisSize: MainAxisSize.min,
                        children: <Widget>[
                          const SizedBox(
                              height:
                                  10), // Add some space between the text and other widgets

                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              const Text(
                                "Latitude:",
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              SizedBox(width: 10),
                              Text(
                                "N ${convertDecimalToDMS(_currentPosition?.latitude ?? 0)} ",
                                style: TextStyle(fontSize: 14),
                              ),
                            ],
                          ),

                          SizedBox(height: 10),

                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              const Text(
                                "Longitude:",
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              SizedBox(width: 10),
                              Text(
                                "E ${convertDecimalToDMS(_currentPosition?.longitude ?? 0)} ",
                                style: TextStyle(fontSize: 14),
                              ),
                            ],
                          ),
                          Flexible(
                            child: farmerPhoto1 == null
                                ? const Text(
                                    'Take photo',
                                    style: TextStyle(
                                        color: Colors.green,
                                        decoration: TextDecoration.none,
                                        fontWeight: FontWeight.normal),
                                  )
                                : Image.file(farmerPhoto1),
                          ),
                          const SizedBox(height: 20),
                          CircleAvatar(
                            radius: 30,
                            backgroundColor: Colors.indigo[400],
                            child: IconButton(
                                color: Colors.white,
                                onPressed: () => getFarmersPhoto(),
                                icon: const Icon(
                                  Icons.camera_alt,
                                )),
                          )
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                Expanded(
                  child: Container(
                    padding: const EdgeInsets.all(10.0),
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        elevation: 5.0,
                        primary: Color.fromARGB(255, 24, 147, 209),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(30.0),
                        ),
                      ),
                      onPressed: _isValidated
                          ? () async {
                              try {
                                if (farmerPhoto1 != null) {
                                  String base64Image = base64Encode(
                                      farmerPhoto1.readAsBytesSync());
                                  String latitudeDMS = 'N ' +
                                      convertDecimalToDMS(
                                          _currentPosition?.latitude ?? 0);
                                  String longitudeDMS = 'E ' +
                                      convertDecimalToDMS(
                                          _currentPosition?.longitude ?? 0);

                                  // Call the addphoto function with the selected data
                                  await DatabaseHelper.instance
                                      .addphoto(submitPhotoModel(
                                    REF_NO: plotDetails[0].REF_NO,
                                    SLNO: plotDetails[0].SLNO,
                                    TENANT_NANE: plotDetails[0].TENANT_NANE,
                                    KISSAM: plotDetails[0].KISSAM,
                                    PLT_NO: plotDetails[0].PLT_NO,
                                    KHATA_NO: plotDetails[0].KHATA_NO,
                                    AREA_AC: plotDetails[0].AREA_AC,
                                    AREA_HA: plotDetails[0].AREA_HA,
                                    RELETION: plotDetails[0].RELETION,
                                    photo: base64Image,
                                    Lattitude: latitudeDMS,
                                    Longitude: longitudeDMS,
                                    isMainPlot: isMainPlot,
                                  ));
                                  await DatabaseHelper.instance
                                      .addAaoVerifiedRef(AAOVerified(
                                          REF_NO: plotDetails[0].REF_NO));
                                  getsubmitPhoto1();
                                  verifiedRef();
                                  // Show success dialog or perform further actions
                                  _showSuccessDialog();
                                } else {
                                  // Handle cases where the required fields are not selected or no photo is captured
                                }
                              } catch (error) {
                                // Handle errors here
                              }
                            }
                          : null,
                      child: Text(
                        "Submit",
                        style: TextStyle(
                          color: Colors.white,
                          letterSpacing: 1.5,
                          fontSize: MediaQuery.of(context).size.height / 35,
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            )
          ],
        ),
      );
}
